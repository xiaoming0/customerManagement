<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

    <!-- <classPathEntry location="D:\Document_x64\Downloads\ojdbc14.jar"/>
      <context id="ORATables" targetRuntime="MyBatis3">
    <commentGenerator>
        <property name="suppressAllComments" value="true" />
        </commentGenerator>
    <jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver" connectionURL="jdbc:oracle:thin:@178.19.60.55:1521:orcl" userId="user" password="pwd">
       </jdbcConnection>
    <javaTypeResolver>
    <property name="forceBigDecimals" value="false"/>
    </javaTypeResolver>
    <javaModelGenerator targetPackage="com.maosheng.demo.model" targetProject="src\main\java">
    <property name="enableSubPackages" value="false"/>
    <property name="trimStrings" value="true"/>
    </javaModelGenerator>
    <sqlMapGenerator targetPackage="com.maosheng.demo.dao" targetProject="src\main\resources">
    <property name="enableSubPackages" value="false"/>
    </sqlMapGenerator>
    <javaClientGenerator type="XMLMAPPER" targetPackage="com.maosheng.demo.dao" targetProject="src\main\java">
    <property name="enableSubPackages" value="false"/>
    </javaClientGenerator>
    <table schema="dispatch_user" tableName="TEST1" domainObjectName="Test1" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
    <property name="useActualColumnNames" value="true"/>
    </table>
    <table schema="dispatch_user" tableName="TEST2" domainObjectName="Test2" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
    <property name="useActualColumnNames"   value="true"/>
    </table>
    </context>  -->

    <classPathEntry location="E:\resource\files\dev\apache-maven-3.0.4\repo\mysql\mysql-connector-java\5.1.41\mysql-connector-java-5.1.41.jar"/>

    <context id="MysqlTables" targetRuntime="MyBatis3">
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <commentGenerator>
            <property name="suppressAllComments" value="true" />
        </commentGenerator>

        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://192.168.0.254:3306/passenger" userId="root" password="root">
        </jdbcConnection>

        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>




        <javaModelGenerator targetPackage="com.kaamoo.customermanagement.entity" targetProject="src\main\java">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!-- 生成SQL map的XML文件生成器，
       注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
           或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
       targetPackage/targetProject:同javaModelGenerator
    -->
        <sqlMapGenerator targetPackage="mappers" targetProject="src\main\resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
       targetPackage/targetProject:同javaModelGenerator
       type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
           1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
           2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
           3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
       注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
   -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.kaamoo.customermanagement.mappers" targetProject="src\main\java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>



        <table schema="passenger" tableName="enterprise" domainObjectName="Enterprise" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="true"/>
            <generatedKey column="id" sqlStatement="MySql" identity="true" type="post"></generatedKey>
            <!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
           column:要重新设置的列名；
           注意，一个table元素中可以有多个columnOverride元素哈~
        -->
            <!--  <columnOverride column="username">
                   使用property属性来指定列要生成的属性名称
                  <property name="property" value="userName"/> -->

                <!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名
                <property name="javaType" value=""/>
                 -->

                <!-- jdbcType用于指定该列的JDBC类型
                <property name="jdbcType" value=""/>
                 -->

                <!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名
                    注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler
                    只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler}的参数描述
                <property name="jdbcType" value=""/>
                -->

                <!-- 参考table元素的delimitAllColumns配置，默认为false
                <property name="delimitedColumnName" value=""/>

            </columnOverride>  -->
        </table>

    </context>


</generatorConfiguration>